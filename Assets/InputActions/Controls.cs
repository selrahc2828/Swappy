//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/InputActions/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerGod"",
            ""id"": ""e392c65e-f392-42af-81ad-9456cbef46a3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""10fd2399-ef57-47bf-bd45-ac7d14be60fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""ca0db29c-63db-481a-8f95-1accb7c58b3a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CopySteal"",
                    ""type"": ""Button"",
                    ""id"": ""7ceda912-4f0e-4edc-9248-aff9cafbecd8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopTime"",
                    ""type"": ""Button"",
                    ""id"": ""e7830582-6053-4936-819b-14b884a0ac44"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PasteSteal"",
                    ""type"": ""Button"",
                    ""id"": ""cf4fcf45-fe26-41e7-9bf0-7c875fc842e9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ReloadScene"",
                    ""type"": ""Button"",
                    ""id"": ""c3c1b66b-7535-4f06-926d-8d5db4ddc621"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ab72754d-9bed-480a-8a6b-6b87694672c6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""773519db-fce0-4e01-90ae-0b5d1451a27f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""CopySteal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52d2ddea-8b7b-4160-a1e2-f3812faa0c94"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""StopTime"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""75abed16-4def-4e4f-86da-4a0a839207ae"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""PasteSteal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a0ef4cbe-e602-4043-bb41-08c6508aa451"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ReloadScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d16957df-764d-4ff0-9bb3-b417c4f3ef70"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""43caf8d6-dd18-4ff9-9e07-1ba471f657dc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0903fe4c-e85d-4da9-88c3-7198d9ed5417"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f6a3a7fe-ec02-4058-b952-9865ca36144f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""da1f6316-107c-4497-b957-2476b6510dd7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ddd10395-3166-44ec-9551-39075ad833d5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b054430-d555-40d3-8417-acf8dd7c8168"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": []
        }
    ]
}");
        // PlayerGod
        m_PlayerGod = asset.FindActionMap("PlayerGod", throwIfNotFound: true);
        m_PlayerGod_Movement = m_PlayerGod.FindAction("Movement", throwIfNotFound: true);
        m_PlayerGod_Look = m_PlayerGod.FindAction("Look", throwIfNotFound: true);
        m_PlayerGod_CopySteal = m_PlayerGod.FindAction("CopySteal", throwIfNotFound: true);
        m_PlayerGod_StopTime = m_PlayerGod.FindAction("StopTime", throwIfNotFound: true);
        m_PlayerGod_PasteSteal = m_PlayerGod.FindAction("PasteSteal", throwIfNotFound: true);
        m_PlayerGod_ReloadScene = m_PlayerGod.FindAction("ReloadScene", throwIfNotFound: true);
        m_PlayerGod_Jump = m_PlayerGod.FindAction("Jump", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_PlayerGod.enabled, "This will cause a leak and performance issues, Controls.PlayerGod.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerGod
    private readonly InputActionMap m_PlayerGod;
    private List<IPlayerGodActions> m_PlayerGodActionsCallbackInterfaces = new List<IPlayerGodActions>();
    private readonly InputAction m_PlayerGod_Movement;
    private readonly InputAction m_PlayerGod_Look;
    private readonly InputAction m_PlayerGod_CopySteal;
    private readonly InputAction m_PlayerGod_StopTime;
    private readonly InputAction m_PlayerGod_PasteSteal;
    private readonly InputAction m_PlayerGod_ReloadScene;
    private readonly InputAction m_PlayerGod_Jump;
    public struct PlayerGodActions
    {
        private @Controls m_Wrapper;
        public PlayerGodActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerGod_Movement;
        public InputAction @Look => m_Wrapper.m_PlayerGod_Look;
        public InputAction @CopySteal => m_Wrapper.m_PlayerGod_CopySteal;
        public InputAction @StopTime => m_Wrapper.m_PlayerGod_StopTime;
        public InputAction @PasteSteal => m_Wrapper.m_PlayerGod_PasteSteal;
        public InputAction @ReloadScene => m_Wrapper.m_PlayerGod_ReloadScene;
        public InputAction @Jump => m_Wrapper.m_PlayerGod_Jump;
        public InputActionMap Get() { return m_Wrapper.m_PlayerGod; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerGodActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerGodActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerGodActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerGodActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @CopySteal.started += instance.OnCopySteal;
            @CopySteal.performed += instance.OnCopySteal;
            @CopySteal.canceled += instance.OnCopySteal;
            @StopTime.started += instance.OnStopTime;
            @StopTime.performed += instance.OnStopTime;
            @StopTime.canceled += instance.OnStopTime;
            @PasteSteal.started += instance.OnPasteSteal;
            @PasteSteal.performed += instance.OnPasteSteal;
            @PasteSteal.canceled += instance.OnPasteSteal;
            @ReloadScene.started += instance.OnReloadScene;
            @ReloadScene.performed += instance.OnReloadScene;
            @ReloadScene.canceled += instance.OnReloadScene;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IPlayerGodActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @CopySteal.started -= instance.OnCopySteal;
            @CopySteal.performed -= instance.OnCopySteal;
            @CopySteal.canceled -= instance.OnCopySteal;
            @StopTime.started -= instance.OnStopTime;
            @StopTime.performed -= instance.OnStopTime;
            @StopTime.canceled -= instance.OnStopTime;
            @PasteSteal.started -= instance.OnPasteSteal;
            @PasteSteal.performed -= instance.OnPasteSteal;
            @PasteSteal.canceled -= instance.OnPasteSteal;
            @ReloadScene.started -= instance.OnReloadScene;
            @ReloadScene.performed -= instance.OnReloadScene;
            @ReloadScene.canceled -= instance.OnReloadScene;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IPlayerGodActions instance)
        {
            if (m_Wrapper.m_PlayerGodActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerGodActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerGodActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerGodActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerGodActions @PlayerGod => new PlayerGodActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerGodActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnCopySteal(InputAction.CallbackContext context);
        void OnStopTime(InputAction.CallbackContext context);
        void OnPasteSteal(InputAction.CallbackContext context);
        void OnReloadScene(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
